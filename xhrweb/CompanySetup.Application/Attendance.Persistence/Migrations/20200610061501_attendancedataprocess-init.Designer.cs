// <auto-generated />
using System;
using Attendance.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Attendance.Persistence.Migrations
{
    [DbContext(typeof(AttendanceContext))]
    [Migration("20200610061501_attendancedataprocess-init")]
    partial class attendancedataprocessinit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("attendance")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Attendance.Core.Entities.Attendance1", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AttendanceYear")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<bool>("OverNightMark")
                        .HasColumnType("boolean");

                    b.Property<short?>("Punchtype")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Attendance1");
                });

            modelBuilder.Entity("Attendance.Core.Entities.Attendance10", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AttendanceYear")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<bool>("OverNightMark")
                        .HasColumnType("boolean");

                    b.Property<short?>("Punchtype")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Attendance10");
                });

            modelBuilder.Entity("Attendance.Core.Entities.Attendance11", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AttendanceYear")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<bool>("OverNightMark")
                        .HasColumnType("boolean");

                    b.Property<short?>("Punchtype")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Attendance11");
                });

            modelBuilder.Entity("Attendance.Core.Entities.Attendance12", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AttendanceYear")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<bool>("OverNightMark")
                        .HasColumnType("boolean");

                    b.Property<short?>("Punchtype")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Attendance12");
                });

            modelBuilder.Entity("Attendance.Core.Entities.Attendance2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AttendanceYear")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<bool>("OverNightMark")
                        .HasColumnType("boolean");

                    b.Property<short?>("Punchtype")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Attendance2");
                });

            modelBuilder.Entity("Attendance.Core.Entities.Attendance3", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AttendanceYear")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<bool>("OverNightMark")
                        .HasColumnType("boolean");

                    b.Property<short?>("Punchtype")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Attendance3");
                });

            modelBuilder.Entity("Attendance.Core.Entities.Attendance4", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AttendanceYear")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<bool>("OverNightMark")
                        .HasColumnType("boolean");

                    b.Property<short?>("Punchtype")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Attendance4");
                });

            modelBuilder.Entity("Attendance.Core.Entities.Attendance5", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AttendanceYear")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<bool>("OverNightMark")
                        .HasColumnType("boolean");

                    b.Property<short?>("Punchtype")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Attendance5");
                });

            modelBuilder.Entity("Attendance.Core.Entities.Attendance6", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AttendanceYear")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<bool>("OverNightMark")
                        .HasColumnType("boolean");

                    b.Property<short?>("Punchtype")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Attendance6");
                });

            modelBuilder.Entity("Attendance.Core.Entities.Attendance7", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AttendanceYear")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<bool>("OverNightMark")
                        .HasColumnType("boolean");

                    b.Property<short?>("Punchtype")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Attendance7");
                });

            modelBuilder.Entity("Attendance.Core.Entities.Attendance8", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AttendanceYear")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<bool>("OverNightMark")
                        .HasColumnType("boolean");

                    b.Property<short?>("Punchtype")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Attendance8");
                });

            modelBuilder.Entity("Attendance.Core.Entities.Attendance9", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AttendanceYear")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<bool>("OverNightMark")
                        .HasColumnType("boolean");

                    b.Property<short?>("Punchtype")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Attendance9");
                });

            modelBuilder.Entity("Attendance.Core.Entities.AttendanceProcessedData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BreakIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("BreakLate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("BreakOut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("BuyerOTTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("BuyerShiftIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("BuyerShiftOut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FinancialYearId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLunchOut")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Late")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("MonthCycleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("OTHour")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PunchDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PunchMonth")
                        .HasColumnType("integer");

                    b.Property<string>("PunchYear")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("RegularHour")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ShiftCode")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ShiftIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ShiftOut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Status_V2")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<DateTime?>("TimeIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("TimeOut")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("AttendanceProcessedData");
                });

            modelBuilder.Entity("Attendance.Core.Entities.AttendanceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AprovalStatus")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Reason")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("RequestTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("AttendanceRequests");
                });

            modelBuilder.Entity("Attendance.Core.Entities.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EarlyOut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EndTime")
                        .HasColumnType("text");

                    b.Property<int>("GraceIn")
                        .HasColumnType("integer");

                    b.Property<int>("GraceOut")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRelaborShift")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRollingShift")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LunchBreakIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LunchBreakOut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RamadanEarlyOut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RamadanIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RamadanLate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RamadanLunchBreakIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RamadanLunchBreakOut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RamadanOut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Range")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegHour")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShiftCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ShiftGroupID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ShiftIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ShiftLate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShiftLocalizedName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ShiftOut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StartTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("Attendance.Core.Entities.ShiftAllocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("C1")
                        .HasColumnType("text");

                    b.Property<string>("C10")
                        .HasColumnType("text");

                    b.Property<string>("C11")
                        .HasColumnType("text");

                    b.Property<string>("C12")
                        .HasColumnType("text");

                    b.Property<string>("C13")
                        .HasColumnType("text");

                    b.Property<string>("C14")
                        .HasColumnType("text");

                    b.Property<string>("C15")
                        .HasColumnType("text");

                    b.Property<string>("C16")
                        .HasColumnType("text");

                    b.Property<string>("C17")
                        .HasColumnType("text");

                    b.Property<string>("C18")
                        .HasColumnType("text");

                    b.Property<string>("C19")
                        .HasColumnType("text");

                    b.Property<string>("C2")
                        .HasColumnType("text");

                    b.Property<string>("C20")
                        .HasColumnType("text");

                    b.Property<string>("C21")
                        .HasColumnType("text");

                    b.Property<string>("C22")
                        .HasColumnType("text");

                    b.Property<string>("C23")
                        .HasColumnType("text");

                    b.Property<string>("C24")
                        .HasColumnType("text");

                    b.Property<string>("C25")
                        .HasColumnType("text");

                    b.Property<string>("C26")
                        .HasColumnType("text");

                    b.Property<string>("C27")
                        .HasColumnType("text");

                    b.Property<string>("C28")
                        .HasColumnType("text");

                    b.Property<string>("C29")
                        .HasColumnType("text");

                    b.Property<string>("C3")
                        .HasColumnType("text");

                    b.Property<string>("C30")
                        .HasColumnType("text");

                    b.Property<string>("C31")
                        .HasColumnType("text");

                    b.Property<string>("C4")
                        .HasColumnType("text");

                    b.Property<string>("C5")
                        .HasColumnType("text");

                    b.Property<string>("C6")
                        .HasColumnType("text");

                    b.Property<string>("C7")
                        .HasColumnType("text");

                    b.Property<string>("C8")
                        .HasColumnType("text");

                    b.Property<string>("C9")
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("DutyMonth")
                        .HasColumnType("integer");

                    b.Property<int>("DutyYear")
                        .HasColumnType("integer");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FinancialYearId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MonthCycleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrimaryShiftId")
                        .HasColumnType("uuid");

                    b.Property<int>("RotationDay")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ShiftAllocations");
                });

            modelBuilder.Entity("Attendance.Core.Entities.ShiftGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ShiftGroupName")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("ShiftGroupNameLC")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("ShiftGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
